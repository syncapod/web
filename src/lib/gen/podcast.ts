// @generated by protobuf-ts 2.1.0 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "podcast.proto" (package "protos", syntax proto3)
// tslint:disable
import { UserEpisode } from "./user";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Subscription } from "./user";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message protos.Image
 */
export interface Image {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * @generated from protobuf message protos.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: repeated protos.Category category = 2;
     */
    category: Category[];
}
/**
 * @generated from protobuf message protos.Podcast
 */
export interface Podcast {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string author = 3;
     */
    author: string;
    /**
     * @generated from protobuf field: bool episodic = 4;
     */
    episodic: boolean;
    /**
     * @generated from protobuf field: string summary = 5;
     */
    summary: string;
    /**
     * @generated from protobuf field: string link = 6;
     */
    link: string;
    /**
     * @generated from protobuf field: protos.Image image = 7;
     */
    image?: Image;
    /**
     * @generated from protobuf field: string explicit = 8;
     */
    explicit: string;
    /**
     * @generated from protobuf field: string language = 9;
     */
    language: string;
    /**
     * @generated from protobuf field: repeated string Keywords = 10 [json_name = "Keywords"];
     */
    keywords: string[];
    /**
     * @generated from protobuf field: repeated protos.Category category = 11;
     */
    category: Category[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp pubDate = 12;
     */
    pubDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp lastBuildDate = 13;
     */
    lastBuildDate?: Timestamp;
    /**
     * @generated from protobuf field: string rss = 14;
     */
    rss: string;
}
/**
 * @generated from protobuf message protos.Episode
 */
export interface Episode {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string podcastID = 2;
     */
    podcastID: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string author = 4;
     */
    author: string;
    /**
     * @generated from protobuf field: string episodeType = 5;
     */
    episodeType: string; // values are full,trailer,bonus
    /**
     * @generated from protobuf field: protos.Image image = 6;
     */
    image?: Image;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp pubDate = 7;
     */
    pubDate?: Timestamp;
    /**
     * @generated from protobuf field: string description = 8;
     */
    description: string;
    /**
     * @generated from protobuf field: string summary = 9;
     */
    summary: string;
    /**
     * @generated from protobuf field: int32 season = 10;
     */
    season: number;
    /**
     * @generated from protobuf field: int32 episode = 11;
     */
    episode: number;
    /**
     * 	repeated Category category = 12;
     *
     * @generated from protobuf field: string explicit = 13;
     */
    explicit: string;
    /**
     * @generated from protobuf field: string MP3URL = 14 [json_name = "MP3URL"];
     */
    mP3URL: string;
    /**
     * @generated from protobuf field: int64 durationMillis = 15;
     */
    durationMillis: string;
    /**
     * @generated from protobuf field: string subtitle = 16;
     */
    subtitle: string;
    /**
     * @generated from protobuf field: string encoded = 17;
     */
    encoded: string;
}
// (PodcastService)

/**
 * @generated from protobuf message protos.GetPodReq
 */
export interface GetPodReq {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * start & end represent the amount of episodes to return
 *
 * @generated from protobuf message protos.Request
 */
export interface Request {
    /**
     * string token = 1;
     *
     * @generated from protobuf field: string podcastID = 2;
     */
    podcastID: string;
    /**
     * @generated from protobuf field: string episodeID = 3;
     */
    episodeID: string;
    /**
     * @generated from protobuf field: int64 start = 4;
     */
    start: string;
    /**
     * @generated from protobuf field: int64 end = 5;
     */
    end: string;
}
/**
 * @generated from protobuf message protos.GetEpiReq
 */
export interface GetEpiReq {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 start = 2;
     */
    start: string;
    /**
     * @generated from protobuf field: int64 end = 3;
     */
    end: string;
}
/**
 * @generated from protobuf message protos.GetUserEpiReq
 */
export interface GetUserEpiReq {
    /**
     * @generated from protobuf field: string epiID = 1;
     */
    epiID: string;
}
/**
 * @generated from protobuf message protos.GetSubReq
 */
export interface GetSubReq {
}
/**
 * @generated from protobuf message protos.GetUserLastPlayedReq
 */
export interface GetUserLastPlayedReq {
}
/**
 * @generated from protobuf message protos.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message protos.LastPlayedRes
 */
export interface LastPlayedRes {
    /**
     * @generated from protobuf field: protos.Podcast podcast = 1;
     */
    podcast?: Podcast;
    /**
     * @generated from protobuf field: protos.Episode episode = 2;
     */
    episode?: Episode;
    /**
     * @generated from protobuf field: int64 millis = 3;
     */
    millis: string;
}
/**
 * @generated from protobuf message protos.Subscriptions
 */
export interface Subscriptions {
    /**
     * @generated from protobuf field: repeated protos.Subscription subscriptions = 1;
     */
    subscriptions: Subscription[];
}
/**
 * @generated from protobuf message protos.Episodes
 */
export interface Episodes {
    /**
     * @generated from protobuf field: repeated protos.Episode episodes = 1;
     */
    episodes: Episode[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Image$Type extends MessageType<Image> {
    constructor() {
        super("protos.Image", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Image>): Image {
        const message = { title: "", url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Image>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Image): Image {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Image, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Image
 */
export const Image = new Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("protos.Category", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = { text: "", category: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* repeated protos.Category category */ 2:
                    message.category.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* repeated protos.Category category = 2; */
        for (let i = 0; i < message.category.length; i++)
            Category.internalBinaryWrite(message.category[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Podcast$Type extends MessageType<Podcast> {
    constructor() {
        super("protos.Podcast", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "episodic", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "image", kind: "message", T: () => Image },
            { no: 8, name: "explicit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "Keywords", kind: "scalar", jsonName: "Keywords", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "category", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category },
            { no: 12, name: "pubDate", kind: "message", T: () => Timestamp },
            { no: 13, name: "lastBuildDate", kind: "message", T: () => Timestamp },
            { no: 14, name: "rss", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Podcast>): Podcast {
        const message = { id: "", title: "", author: "", episodic: false, summary: "", link: "", explicit: "", language: "", keywords: [], category: [], rss: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Podcast>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Podcast): Podcast {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string author */ 3:
                    message.author = reader.string();
                    break;
                case /* bool episodic */ 4:
                    message.episodic = reader.bool();
                    break;
                case /* string summary */ 5:
                    message.summary = reader.string();
                    break;
                case /* string link */ 6:
                    message.link = reader.string();
                    break;
                case /* protos.Image image */ 7:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* string explicit */ 8:
                    message.explicit = reader.string();
                    break;
                case /* string language */ 9:
                    message.language = reader.string();
                    break;
                case /* repeated string Keywords = 10 [json_name = "Keywords"];*/ 10:
                    message.keywords.push(reader.string());
                    break;
                case /* repeated protos.Category category */ 11:
                    message.category.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp pubDate */ 12:
                    message.pubDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.pubDate);
                    break;
                case /* google.protobuf.Timestamp lastBuildDate */ 13:
                    message.lastBuildDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastBuildDate);
                    break;
                case /* string rss */ 14:
                    message.rss = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Podcast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string author = 3; */
        if (message.author !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.author);
        /* bool episodic = 4; */
        if (message.episodic !== false)
            writer.tag(4, WireType.Varint).bool(message.episodic);
        /* string summary = 5; */
        if (message.summary !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.summary);
        /* string link = 6; */
        if (message.link !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.link);
        /* protos.Image image = 7; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string explicit = 8; */
        if (message.explicit !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.explicit);
        /* string language = 9; */
        if (message.language !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.language);
        /* repeated string Keywords = 10 [json_name = "Keywords"]; */
        for (let i = 0; i < message.keywords.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.keywords[i]);
        /* repeated protos.Category category = 11; */
        for (let i = 0; i < message.category.length; i++)
            Category.internalBinaryWrite(message.category[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp pubDate = 12; */
        if (message.pubDate)
            Timestamp.internalBinaryWrite(message.pubDate, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp lastBuildDate = 13; */
        if (message.lastBuildDate)
            Timestamp.internalBinaryWrite(message.lastBuildDate, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string rss = 14; */
        if (message.rss !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.rss);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Podcast
 */
export const Podcast = new Podcast$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Episode$Type extends MessageType<Episode> {
    constructor() {
        super("protos.Episode", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "podcastID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "episodeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image", kind: "message", T: () => Image },
            { no: 7, name: "pubDate", kind: "message", T: () => Timestamp },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "season", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "episode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "explicit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "MP3URL", kind: "scalar", jsonName: "MP3URL", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "durationMillis", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 16, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "encoded", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Episode>): Episode {
        const message = { id: "", podcastID: "", title: "", author: "", episodeType: "", description: "", summary: "", season: 0, episode: 0, explicit: "", mP3URL: "", durationMillis: "0", subtitle: "", encoded: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Episode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Episode): Episode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string podcastID */ 2:
                    message.podcastID = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string author */ 4:
                    message.author = reader.string();
                    break;
                case /* string episodeType */ 5:
                    message.episodeType = reader.string();
                    break;
                case /* protos.Image image */ 6:
                    message.image = Image.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* google.protobuf.Timestamp pubDate */ 7:
                    message.pubDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.pubDate);
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* string summary */ 9:
                    message.summary = reader.string();
                    break;
                case /* int32 season */ 10:
                    message.season = reader.int32();
                    break;
                case /* int32 episode */ 11:
                    message.episode = reader.int32();
                    break;
                case /* string explicit */ 13:
                    message.explicit = reader.string();
                    break;
                case /* string MP3URL = 14 [json_name = "MP3URL"];*/ 14:
                    message.mP3URL = reader.string();
                    break;
                case /* int64 durationMillis */ 15:
                    message.durationMillis = reader.int64().toString();
                    break;
                case /* string subtitle */ 16:
                    message.subtitle = reader.string();
                    break;
                case /* string encoded */ 17:
                    message.encoded = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Episode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string podcastID = 2; */
        if (message.podcastID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.podcastID);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string author = 4; */
        if (message.author !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.author);
        /* string episodeType = 5; */
        if (message.episodeType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.episodeType);
        /* protos.Image image = 6; */
        if (message.image)
            Image.internalBinaryWrite(message.image, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp pubDate = 7; */
        if (message.pubDate)
            Timestamp.internalBinaryWrite(message.pubDate, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* string summary = 9; */
        if (message.summary !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.summary);
        /* int32 season = 10; */
        if (message.season !== 0)
            writer.tag(10, WireType.Varint).int32(message.season);
        /* int32 episode = 11; */
        if (message.episode !== 0)
            writer.tag(11, WireType.Varint).int32(message.episode);
        /* string explicit = 13; */
        if (message.explicit !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.explicit);
        /* string MP3URL = 14 [json_name = "MP3URL"]; */
        if (message.mP3URL !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.mP3URL);
        /* int64 durationMillis = 15; */
        if (message.durationMillis !== "0")
            writer.tag(15, WireType.Varint).int64(message.durationMillis);
        /* string subtitle = 16; */
        if (message.subtitle !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.subtitle);
        /* string encoded = 17; */
        if (message.encoded !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.encoded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Episode
 */
export const Episode = new Episode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPodReq$Type extends MessageType<GetPodReq> {
    constructor() {
        super("protos.GetPodReq", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPodReq>): GetPodReq {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPodReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPodReq): GetPodReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPodReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.GetPodReq
 */
export const GetPodReq = new GetPodReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("protos.Request", [
            { no: 2, name: "podcastID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "episodeID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { podcastID: "", episodeID: "", start: "0", end: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string podcastID */ 2:
                    message.podcastID = reader.string();
                    break;
                case /* string episodeID */ 3:
                    message.episodeID = reader.string();
                    break;
                case /* int64 start */ 4:
                    message.start = reader.int64().toString();
                    break;
                case /* int64 end */ 5:
                    message.end = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string podcastID = 2; */
        if (message.podcastID !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.podcastID);
        /* string episodeID = 3; */
        if (message.episodeID !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.episodeID);
        /* int64 start = 4; */
        if (message.start !== "0")
            writer.tag(4, WireType.Varint).int64(message.start);
        /* int64 end = 5; */
        if (message.end !== "0")
            writer.tag(5, WireType.Varint).int64(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEpiReq$Type extends MessageType<GetEpiReq> {
    constructor() {
        super("protos.GetEpiReq", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<GetEpiReq>): GetEpiReq {
        const message = { id: "", start: "0", end: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetEpiReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEpiReq): GetEpiReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 start */ 2:
                    message.start = reader.int64().toString();
                    break;
                case /* int64 end */ 3:
                    message.end = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEpiReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 start = 2; */
        if (message.start !== "0")
            writer.tag(2, WireType.Varint).int64(message.start);
        /* int64 end = 3; */
        if (message.end !== "0")
            writer.tag(3, WireType.Varint).int64(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.GetEpiReq
 */
export const GetEpiReq = new GetEpiReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserEpiReq$Type extends MessageType<GetUserEpiReq> {
    constructor() {
        super("protos.GetUserEpiReq", [
            { no: 1, name: "epiID", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserEpiReq>): GetUserEpiReq {
        const message = { epiID: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserEpiReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserEpiReq): GetUserEpiReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string epiID */ 1:
                    message.epiID = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserEpiReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string epiID = 1; */
        if (message.epiID !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.epiID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.GetUserEpiReq
 */
export const GetUserEpiReq = new GetUserEpiReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubReq$Type extends MessageType<GetSubReq> {
    constructor() {
        super("protos.GetSubReq", []);
    }
    create(value?: PartialMessage<GetSubReq>): GetSubReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSubReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubReq): GetSubReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetSubReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.GetSubReq
 */
export const GetSubReq = new GetSubReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserLastPlayedReq$Type extends MessageType<GetUserLastPlayedReq> {
    constructor() {
        super("protos.GetUserLastPlayedReq", []);
    }
    create(value?: PartialMessage<GetUserLastPlayedReq>): GetUserLastPlayedReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserLastPlayedReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserLastPlayedReq): GetUserLastPlayedReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetUserLastPlayedReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.GetUserLastPlayedReq
 */
export const GetUserLastPlayedReq = new GetUserLastPlayedReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("protos.Response", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { success: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LastPlayedRes$Type extends MessageType<LastPlayedRes> {
    constructor() {
        super("protos.LastPlayedRes", [
            { no: 1, name: "podcast", kind: "message", T: () => Podcast },
            { no: 2, name: "episode", kind: "message", T: () => Episode },
            { no: 3, name: "millis", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<LastPlayedRes>): LastPlayedRes {
        const message = { millis: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LastPlayedRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastPlayedRes): LastPlayedRes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.Podcast podcast */ 1:
                    message.podcast = Podcast.internalBinaryRead(reader, reader.uint32(), options, message.podcast);
                    break;
                case /* protos.Episode episode */ 2:
                    message.episode = Episode.internalBinaryRead(reader, reader.uint32(), options, message.episode);
                    break;
                case /* int64 millis */ 3:
                    message.millis = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LastPlayedRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.Podcast podcast = 1; */
        if (message.podcast)
            Podcast.internalBinaryWrite(message.podcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* protos.Episode episode = 2; */
        if (message.episode)
            Episode.internalBinaryWrite(message.episode, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 millis = 3; */
        if (message.millis !== "0")
            writer.tag(3, WireType.Varint).int64(message.millis);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.LastPlayedRes
 */
export const LastPlayedRes = new LastPlayedRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Subscriptions$Type extends MessageType<Subscriptions> {
    constructor() {
        super("protos.Subscriptions", [
            { no: 1, name: "subscriptions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Subscription }
        ]);
    }
    create(value?: PartialMessage<Subscriptions>): Subscriptions {
        const message = { subscriptions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subscriptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subscriptions): Subscriptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated protos.Subscription subscriptions */ 1:
                    message.subscriptions.push(Subscription.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subscriptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated protos.Subscription subscriptions = 1; */
        for (let i = 0; i < message.subscriptions.length; i++)
            Subscription.internalBinaryWrite(message.subscriptions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Subscriptions
 */
export const Subscriptions = new Subscriptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Episodes$Type extends MessageType<Episodes> {
    constructor() {
        super("protos.Episodes", [
            { no: 1, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Episode }
        ]);
    }
    create(value?: PartialMessage<Episodes>): Episodes {
        const message = { episodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Episodes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Episodes): Episodes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated protos.Episode episodes */ 1:
                    message.episodes.push(Episode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Episodes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated protos.Episode episodes = 1; */
        for (let i = 0; i < message.episodes.length; i++)
            Episode.internalBinaryWrite(message.episodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Episodes
 */
export const Episodes = new Episodes$Type();
/**
 * @generated ServiceType for protobuf service protos.Pod
 */
export const Pod = new ServiceType("protos.Pod", [
    { name: "GetPodcast", options: {}, I: GetPodReq, O: Podcast },
    { name: "GetEpisodes", options: {}, I: GetEpiReq, O: Episodes },
    { name: "GetUserEpisode", options: {}, I: GetUserEpiReq, O: UserEpisode },
    { name: "UpsertUserEpisode", options: {}, I: UserEpisode, O: Response },
    { name: "GetSubscriptions", options: {}, I: GetSubReq, O: Subscriptions },
    { name: "GetUserLastPlayed", options: {}, I: GetUserLastPlayedReq, O: LastPlayedRes }
]);
