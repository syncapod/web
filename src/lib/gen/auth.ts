// @generated by protobuf-ts 2.2.1 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "auth.proto" (package "protos", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "./user";
/**
 * @generated from protobuf message protos.AuthenticateReq
 */
export interface AuthenticateReq {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: bool stayLoggedIn = 3;
     */
    stayLoggedIn: boolean;
    /**
     * @generated from protobuf field: string userAgent = 4;
     */
    userAgent: string;
    /**
     * @generated from protobuf field: bool admin = 5;
     */
    admin: boolean;
}
/**
 * @generated from protobuf message protos.AuthenticateRes
 */
export interface AuthenticateRes {
    /**
     * @generated from protobuf field: string sessionKey = 1;
     */
    sessionKey: string;
    /**
     * @generated from protobuf field: protos.User user = 2;
     */
    user?: User;
}
/**
 * @generated from protobuf message protos.AuthorizeReq
 */
export interface AuthorizeReq {
    /**
     * @generated from protobuf field: string sessionKey = 1;
     */
    sessionKey: string;
    /**
     * @generated from protobuf field: bool admin = 2;
     */
    admin: boolean;
}
/**
 * @generated from protobuf message protos.AuthorizeRes
 */
export interface AuthorizeRes {
    /**
     * @generated from protobuf field: protos.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message protos.LogoutReq
 */
export interface LogoutReq {
    /**
     * @generated from protobuf field: string sessionKey = 1;
     */
    sessionKey: string;
}
/**
 * @generated from protobuf message protos.LogoutRes
 */
export interface LogoutRes {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * CreateAccountReq contains the necessary information for user account creation
 *
 * @generated from protobuf message protos.CreateAccountReq
 */
export interface CreateAccountReq {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
    /**
     * @generated from protobuf field: int64 dateOfBirth = 4;
     */
    dateOfBirth: string;
    /**
     * @generated from protobuf field: bool acceptTerms = 5;
     */
    acceptTerms: boolean;
}
/**
 * CreateAccountRes sends back an error message (if any)
 *
 * @generated from protobuf message protos.CreateAccountRes
 */
export interface CreateAccountRes {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message protos.ResetPasswordReq
 */
export interface ResetPasswordReq {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
}
/**
 * @generated from protobuf message protos.ResetPasswordRes
 */
export interface ResetPasswordRes {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message protos.ActivateReq
 */
export interface ActivateReq {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message protos.ActivateRes
 */
export interface ActivateRes {
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateReq$Type extends MessageType<AuthenticateReq> {
    constructor() {
        super("protos.AuthenticateReq", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stayLoggedIn", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "userAgent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateReq>): AuthenticateReq {
        const message = { username: "", password: "", stayLoggedIn: false, userAgent: "", admin: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthenticateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateReq): AuthenticateReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* bool stayLoggedIn */ 3:
                    message.stayLoggedIn = reader.bool();
                    break;
                case /* string userAgent */ 4:
                    message.userAgent = reader.string();
                    break;
                case /* bool admin */ 5:
                    message.admin = reader.bool();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* bool stayLoggedIn = 3; */
        if (message.stayLoggedIn !== false)
            writer.tag(3, WireType.Varint).bool(message.stayLoggedIn);
        /* string userAgent = 4; */
        if (message.userAgent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userAgent);
        /* bool admin = 5; */
        if (message.admin !== false)
            writer.tag(5, WireType.Varint).bool(message.admin);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AuthenticateReq
 */
export const AuthenticateReq = new AuthenticateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateRes$Type extends MessageType<AuthenticateRes> {
    constructor() {
        super("protos.AuthenticateRes", [
            { no: 1, name: "sessionKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<AuthenticateRes>): AuthenticateRes {
        const message = { sessionKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthenticateRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateRes): AuthenticateRes {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionKey */ 1:
                    message.sessionKey = reader.string();
                    break;
                case /* protos.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionKey = 1; */
        if (message.sessionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionKey);
        /* protos.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AuthenticateRes
 */
export const AuthenticateRes = new AuthenticateRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizeReq$Type extends MessageType<AuthorizeReq> {
    constructor() {
        super("protos.AuthorizeReq", [
            { no: 1, name: "sessionKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "admin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AuthorizeReq>): AuthorizeReq {
        const message = { sessionKey: "", admin: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizeReq): AuthorizeReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionKey */ 1:
                    message.sessionKey = reader.string();
                    break;
                case /* bool admin */ 2:
                    message.admin = reader.bool();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionKey = 1; */
        if (message.sessionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionKey);
        /* bool admin = 2; */
        if (message.admin !== false)
            writer.tag(2, WireType.Varint).bool(message.admin);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AuthorizeReq
 */
export const AuthorizeReq = new AuthorizeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthorizeRes$Type extends MessageType<AuthorizeRes> {
    constructor() {
        super("protos.AuthorizeRes", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<AuthorizeRes>): AuthorizeRes {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthorizeRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthorizeRes): AuthorizeRes {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthorizeRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AuthorizeRes
 */
export const AuthorizeRes = new AuthorizeRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutReq$Type extends MessageType<LogoutReq> {
    constructor() {
        super("protos.LogoutReq", [
            { no: 1, name: "sessionKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutReq>): LogoutReq {
        const message = { sessionKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutReq): LogoutReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sessionKey */ 1:
                    message.sessionKey = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sessionKey = 1; */
        if (message.sessionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionKey);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.LogoutReq
 */
export const LogoutReq = new LogoutReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRes$Type extends MessageType<LogoutRes> {
    constructor() {
        super("protos.LogoutRes", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutRes>): LogoutRes {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRes): LogoutRes {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.LogoutRes
 */
export const LogoutRes = new LogoutRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountReq$Type extends MessageType<CreateAccountReq> {
    constructor() {
        super("protos.CreateAccountReq", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dateOfBirth", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "acceptTerms", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAccountReq>): CreateAccountReq {
        const message = { username: "", email: "", password: "", dateOfBirth: "0", acceptTerms: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountReq): CreateAccountReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                case /* int64 dateOfBirth */ 4:
                    message.dateOfBirth = reader.int64().toString();
                    break;
                case /* bool acceptTerms */ 5:
                    message.acceptTerms = reader.bool();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        /* int64 dateOfBirth = 4; */
        if (message.dateOfBirth !== "0")
            writer.tag(4, WireType.Varint).int64(message.dateOfBirth);
        /* bool acceptTerms = 5; */
        if (message.acceptTerms !== false)
            writer.tag(5, WireType.Varint).bool(message.acceptTerms);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateAccountReq
 */
export const CreateAccountReq = new CreateAccountReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountRes$Type extends MessageType<CreateAccountRes> {
    constructor() {
        super("protos.CreateAccountRes", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAccountRes>): CreateAccountRes {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountRes): CreateAccountRes {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateAccountRes
 */
export const CreateAccountRes = new CreateAccountRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordReq$Type extends MessageType<ResetPasswordReq> {
    constructor() {
        super("protos.ResetPasswordReq", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetPasswordReq>): ResetPasswordReq {
        const message = { email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordReq): ResetPasswordReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPasswordReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ResetPasswordReq
 */
export const ResetPasswordReq = new ResetPasswordReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordRes$Type extends MessageType<ResetPasswordRes> {
    constructor() {
        super("protos.ResetPasswordRes", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetPasswordRes>): ResetPasswordRes {
        const message = { error: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordRes): ResetPasswordRes {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPasswordRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ResetPasswordRes
 */
export const ResetPasswordRes = new ResetPasswordRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivateReq$Type extends MessageType<ActivateReq> {
    constructor() {
        super("protos.ActivateReq", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActivateReq>): ActivateReq {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivateReq): ActivateReq {
        const message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ActivateReq
 */
export const ActivateReq = new ActivateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivateRes$Type extends MessageType<ActivateRes> {
    constructor() {
        super("protos.ActivateRes", []);
    }
    create(value?: PartialMessage<ActivateRes>): ActivateRes {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivateRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivateRes): ActivateRes {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ActivateRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ActivateRes
 */
export const ActivateRes = new ActivateRes$Type();
/**
 * @generated ServiceType for protobuf service protos.Auth
 */
export const Auth = new ServiceType("protos.Auth", [
    { name: "CreateAccount", options: {}, I: CreateAccountReq, O: CreateAccountRes },
    { name: "Activate", options: {}, I: ActivateReq, O: ActivateRes },
    { name: "ResetPassword", options: {}, I: ResetPasswordReq, O: ResetPasswordRes },
    { name: "Authenticate", options: {}, I: AuthenticateReq, O: AuthenticateRes },
    { name: "Authorize", options: {}, I: AuthorizeReq, O: AuthorizeRes },
    { name: "Logout", options: {}, I: LogoutReq, O: LogoutRes }
]);
