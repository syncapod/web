// @generated by protobuf-ts 2.1.0 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "podcast.proto" (package "protos", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Pod } from "./podcast";
import type { LastPlayedRes } from "./podcast";
import type { GetUserLastPlayedReq } from "./podcast";
import type { Subscriptions } from "./podcast";
import type { GetSubReq } from "./podcast";
import type { Response } from "./podcast";
import type { UserEpisode } from "./user";
import type { GetUserEpiReq } from "./podcast";
import type { Episodes } from "./podcast";
import type { GetEpiReq } from "./podcast";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Podcast } from "./podcast";
import type { GetPodReq } from "./podcast";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service protos.Pod
 */
export interface IPodClient {
    /**
     * Podcast and Episodes
     *
     * @generated from protobuf rpc: GetPodcast(protos.GetPodReq) returns (protos.Podcast);
     */
    getPodcast(input: GetPodReq, options?: RpcOptions): UnaryCall<GetPodReq, Podcast>;
    /**
     * @generated from protobuf rpc: GetEpisodes(protos.GetEpiReq) returns (protos.Episodes);
     */
    getEpisodes(input: GetEpiReq, options?: RpcOptions): UnaryCall<GetEpiReq, Episodes>;
    /**
     * UserEpisode
     *
     * @generated from protobuf rpc: GetUserEpisode(protos.GetUserEpiReq) returns (protos.UserEpisode);
     */
    getUserEpisode(input: GetUserEpiReq, options?: RpcOptions): UnaryCall<GetUserEpiReq, UserEpisode>;
    /**
     * @generated from protobuf rpc: UpsertUserEpisode(protos.UserEpisode) returns (protos.Response);
     */
    upsertUserEpisode(input: UserEpisode, options?: RpcOptions): UnaryCall<UserEpisode, Response>;
    /**
     * Subscriptions
     *
     * @generated from protobuf rpc: GetSubscriptions(protos.GetSubReq) returns (protos.Subscriptions);
     */
    getSubscriptions(input: GetSubReq, options?: RpcOptions): UnaryCall<GetSubReq, Subscriptions>;
    // option (google.api.http) = { 

    // post: "/v1/podcast/upsert_subscription" 

    // body: "*" 

    // }; 

    // } 

    /**
     * Misc.
     *
     * @generated from protobuf rpc: GetUserLastPlayed(protos.GetUserLastPlayedReq) returns (protos.LastPlayedRes);
     */
    getUserLastPlayed(input: GetUserLastPlayedReq, options?: RpcOptions): UnaryCall<GetUserLastPlayedReq, LastPlayedRes>;
}
/**
 * @generated from protobuf service protos.Pod
 */
export class PodClient implements IPodClient, ServiceInfo {
    typeName = Pod.typeName;
    methods = Pod.methods;
    options = Pod.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Podcast and Episodes
     *
     * @generated from protobuf rpc: GetPodcast(protos.GetPodReq) returns (protos.Podcast);
     */
    getPodcast(input: GetPodReq, options?: RpcOptions): UnaryCall<GetPodReq, Podcast> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPodReq, Podcast>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEpisodes(protos.GetEpiReq) returns (protos.Episodes);
     */
    getEpisodes(input: GetEpiReq, options?: RpcOptions): UnaryCall<GetEpiReq, Episodes> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEpiReq, Episodes>("unary", this._transport, method, opt, input);
    }
    /**
     * UserEpisode
     *
     * @generated from protobuf rpc: GetUserEpisode(protos.GetUserEpiReq) returns (protos.UserEpisode);
     */
    getUserEpisode(input: GetUserEpiReq, options?: RpcOptions): UnaryCall<GetUserEpiReq, UserEpisode> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserEpiReq, UserEpisode>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertUserEpisode(protos.UserEpisode) returns (protos.Response);
     */
    upsertUserEpisode(input: UserEpisode, options?: RpcOptions): UnaryCall<UserEpisode, Response> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserEpisode, Response>("unary", this._transport, method, opt, input);
    }
    /**
     * Subscriptions
     *
     * @generated from protobuf rpc: GetSubscriptions(protos.GetSubReq) returns (protos.Subscriptions);
     */
    getSubscriptions(input: GetSubReq, options?: RpcOptions): UnaryCall<GetSubReq, Subscriptions> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSubReq, Subscriptions>("unary", this._transport, method, opt, input);
    }
    // option (google.api.http) = { 

    // post: "/v1/podcast/upsert_subscription" 

    // body: "*" 

    // }; 

    // } 

    /**
     * Misc.
     *
     * @generated from protobuf rpc: GetUserLastPlayed(protos.GetUserLastPlayedReq) returns (protos.LastPlayedRes);
     */
    getUserLastPlayed(input: GetUserLastPlayedReq, options?: RpcOptions): UnaryCall<GetUserLastPlayedReq, LastPlayedRes> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserLastPlayedReq, LastPlayedRes>("unary", this._transport, method, opt, input);
    }
}
