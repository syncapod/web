// @generated by protobuf-ts 2.1.0 with parameter long_type_string,generate_dependencies
// @generated from protobuf file "admin.proto" (package "protos", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Podcast } from "./podcast";
/**
 * @generated from protobuf message protos.AddPodReq
 */
export interface AddPodReq {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message protos.AddPodRes
 */
export interface AddPodRes {
    /**
     * @generated from protobuf field: protos.Podcast podcast = 1;
     */
    podcast?: Podcast;
}
/**
 * @generated from protobuf message protos.RefPodReq
 */
export interface RefPodReq {
}
/**
 * @generated from protobuf message protos.RefPodRes
 */
export interface RefPodRes {
}
// @generated message type with reflection information, may provide speed optimized methods
class AddPodReq$Type extends MessageType<AddPodReq> {
    constructor() {
        super("protos.AddPodReq", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddPodReq>): AddPodReq {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddPodReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPodReq): AddPodReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPodReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AddPodReq
 */
export const AddPodReq = new AddPodReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPodRes$Type extends MessageType<AddPodRes> {
    constructor() {
        super("protos.AddPodRes", [
            { no: 1, name: "podcast", kind: "message", T: () => Podcast }
        ]);
    }
    create(value?: PartialMessage<AddPodRes>): AddPodRes {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddPodRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPodRes): AddPodRes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.Podcast podcast */ 1:
                    message.podcast = Podcast.internalBinaryRead(reader, reader.uint32(), options, message.podcast);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPodRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.Podcast podcast = 1; */
        if (message.podcast)
            Podcast.internalBinaryWrite(message.podcast, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AddPodRes
 */
export const AddPodRes = new AddPodRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefPodReq$Type extends MessageType<RefPodReq> {
    constructor() {
        super("protos.RefPodReq", []);
    }
    create(value?: PartialMessage<RefPodReq>): RefPodReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefPodReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefPodReq): RefPodReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RefPodReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.RefPodReq
 */
export const RefPodReq = new RefPodReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefPodRes$Type extends MessageType<RefPodRes> {
    constructor() {
        super("protos.RefPodRes", []);
    }
    create(value?: PartialMessage<RefPodRes>): RefPodRes {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefPodRes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefPodRes): RefPodRes {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RefPodRes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.RefPodRes
 */
export const RefPodRes = new RefPodRes$Type();
/**
 * @generated ServiceType for protobuf service protos.Admin
 */
export const Admin = new ServiceType("protos.Admin", [
    { name: "AddPodcast", options: { "google.api.http": { post: "/v1/admin/add_podcast", body: "*" } }, I: AddPodReq, O: AddPodRes },
    { name: "RefreshPodcast", options: { "google.api.http": { post: "/v1/admin/refresh_podcast", body: "*" } }, I: RefPodReq, O: RefPodRes }
]);
